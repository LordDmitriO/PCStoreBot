from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import app.keyboards as kb
from app.database.requests import (get_promotion_by_id, get_item_by_id, set_user, set_basket, set_order, 
                                   get_basket, get_item_in_basket, get_orders, get_order_by_id, delete_item_in_basket, delete_basket)
from app.functions import o_number


router = Router()


class Reg_pickup(StatesGroup):
    name = State()
    number = State()

class Reg_delivery(StatesGroup):
    name = State()
    number = State()
    address = State()


@router.message(CommandStart())
@router.callback_query(F.data == 'to_main')
async def cmd_start(message: Message | CallbackQuery):
    if isinstance(message, Message):
        await set_user(message.from_user.id)
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö –¥–ª—è –ü–ö üñ•PCStoreüñ•!',
                            reply_markup=kb.main)
    else:
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é.')
        await message.message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö –¥–ª—è –ü–ö üñ•PCStoreüñ•!',
                            reply_markup=kb.main)
        

@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–º–æ—â–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞!\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –≤—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start')
    

@router.callback_query(F.data == 'about')
async def about(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö! üñ•Ô∏è\n\n'
                                     '–ú—ã - –∫–æ–º–∞–Ω–¥–∞ —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ª—é–±—è—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å—Ç—Ä–µ–º—è—Ç—Å—è –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ —Å –Ω–∞—à–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.\n\n'
                                     'üåü –ù–∞—à–∞ —Ü–µ–ª—å - —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ –º–∏—Ä—É –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ª–µ–≥–∫–∏–º, —É–¥–æ–±–Ω—ã–º –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º.'
                                     '–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –∏ –∂–µ–ª–∞–Ω–∏–π. \n\n'
                                     'üõ†Ô∏è –° –Ω–∞–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç–µ. –ú—ã —Å–ª–µ–¥–∏–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –Ω–æ–≤–∏–Ω–∫–∞–º–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Å–∞–º–æ–µ –ª—É—á—à–µ–µ.\n\n'
                                     'ü§ù –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—é –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–æ–≤–µ—Ç–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø–æ–¥ –≤–∞—à–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏.\n\n'
                                     '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å!',
                                     reply_markup=await kb.contacts())


@router.callback_query(F.data == 'catalog')
async def catalog(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.', 
                         reply_markup=await kb.categories())
    

@router.callback_query(F.data == 'contacts')
async def contacts(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n–ü–æ—á—Ç–∞: otvalnyui@otval.com\n–¢–µ–ª–µ—Ñ–æ–Ω: +7(228)775-47-82\n–ê–¥—Ä–µ—Å: –û—Ç–≤–∞–ª—å–Ω–∞—è —É–ª–∏—Ü–∞ –¥.228 –∫.478, –≤—Ö–æ–¥ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –ø–æ–¥–≤–∞–ª–∞.',
                                     reply_markup=await kb.contacts())
    

@router.callback_query(F.data == 'promotions')
async def promotions(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∞–∫—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:',
                                     reply_markup=await kb.promotions())
    

@router.callback_query(F.data.startswith('promotion_'))
async def promotion(callback: CallbackQuery):
    promotion_id = int(callback.data.split('_')[1])
    promotion = await get_promotion_by_id(promotion_id)
    await callback.answer('')
    await callback.message.edit_text(text=f'{promotion.name}\n\n{promotion.description}\n\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {promotion.date_start}\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {promotion.date_end}',
                                     reply_markup=kb.to_main)


@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
                                  reply_markup=await kb.subcategories(int(callback.data.split('_')[1])))
    

@router.callback_query(F.data.startswith('subcategory_'))
async def subcategory(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä.',
                                  reply_markup=await kb.items(int(callback.data.split('_')[1])))
    

@router.callback_query(F.data.startswith('item_'))
async def category(callback: CallbackQuery):
    item_id = int(callback.data.split('_')[1])
    item = await get_item_by_id(item_id)
    await callback.answer('')
    await callback.message.answer_photo(photo=item.photo, caption=f'{item.name}\n\n{item.description}\n\n–¶–µ–Ω–∞: {item.price} —Ä—É–±–ª–µ–π',
                                  reply_markup=await kb.basket(item.id))
    

@router.callback_query(F.data.startswith('order_'))
async def basket(callback: CallbackQuery):
    await set_basket(callback.from_user.id, int(callback.data.split('_')[1]))
    await callback.answer('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.')


@router.callback_query(F.data == 'mybasket')
async def mybasket(callback: CallbackQuery):
    await callback.answer('')
    basket = await get_basket(callback.from_user.id)
    counter = 0
    for item_info in basket:
        item = await get_item_by_id(item_info.item)
        await callback.message.answer_photo(photo=item.photo, caption=f'{item.name}\n\n{item.description}\n\n–¶–µ–Ω–∞: {item.price} —Ä—É–±–ª–µ–π',
                                            reply_markup=await kb.delete_from_basket_go_to_total(item.id))
        counter += 1
    await callback.message.answer('–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.') if counter == 0 else await callback.answer('')


@router.callback_query(F.data == 'myorders')
async def myorders(callback: CallbackQuery):
    await callback.answer('')
    orders = await get_orders(callback.from_user.id)
    counter = 0
    items_data = {}
    pieces_data = {}
    numbers = []
    for order_info in orders:
        order = await get_order_by_id(order_info.id)
        item = await get_item_by_id(order_info.item)
        if (item.name in items_data) and (item.name in pieces_data):
            items_data[item.name] += int(item.price)
            pieces_data[item.name] += 1
        else:
            items_data[item.name] = int(item.price)
            pieces_data[item.name] = 1

        items = []
        items.append(f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - {order.order_number}\n\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n–ò–º—è: {order.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {order.number}\n–ê–¥—Ä–µ—Å: {order.address}\n\n–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n')
        number = 0
        for name, price in items_data.items():
            number += 1             
            items.append(f'{number}. {name}: {price} —Ä—É–±–ª–µ–π - {pieces_data[name]} —à—Ç')

        items.append(f'\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {sum(items_data.values())} —Ä—É–±–ª–µ–π\n\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ - {order.status}')
        await callback.message.answer('\n'.join(items), reply_markup=kb.to_main)
        counter += 1
        items_data = {}
        pieces_data = {}
    await callback.message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.') if counter == 0 else await callback.answer('')


@router.callback_query(F.data == 'total')
async def total(callback: CallbackQuery):
    my_items = await get_basket(callback.from_user.id)
    items_data = {}
    pieces_data = {}
    for myitem in my_items:
        item = await get_item_by_id(myitem.item)
        if (item.name in items_data) and (item.name in pieces_data):
            items_data[item.name] += int(item.price)
            pieces_data[item.name] += 1
        else:
            items_data[item.name] = int(item.price)
            pieces_data[item.name] = 1

    items = []
    items.append(f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n')
    number = 0
    for name, price in items_data.items():
        number += 1
        items.append(f'{number}. {name}: {price} —Ä—É–±–ª–µ–π - {pieces_data[name]} —à—Ç')
    
    items.append(f'\n–û–±—â–∞—è —Å—É–º–º–∞: {sum(items_data.values())} —Ä—É–±–ª–µ–π\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:')
    await callback.message.answer('\n'.join(items), reply_markup=await kb.making_order())


@router.callback_query(F.data == 'pickup')
async def reg_pickup_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Reg_pickup.name)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è')


@router.message(Reg_pickup.name)
async def reg_pickup_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg_pickup.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


@router.message(Reg_pickup.number)
async def reg_pickup_number(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    await state.update_data(order_number=o_number)
    await state.update_data(user=message.from_user.id)
    for item_get in await get_item_in_basket(message.from_user.id):
        await state.update_data(item=item_get)
    await state.update_data(status='–û–±—Ä–∞–±–æ—Ç–∫–∞')
    data = await state.get_data()
    await set_order(data)
    await message.answer(f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n–ò–º—è: {data['name']}\n–ù–æ–º–µ—Ä: {data['number']}', reply_markup=await kb.pay())
    await state.clear()


@router.callback_query(F.data == 'delivery')
async def reg_delivery_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Reg_delivery.name)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è')


@router.message(Reg_delivery.name)
async def reg_delivery_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg_delivery.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


@router.message(Reg_delivery.number)
async def reg_delivery_number(message: Message, state: FSMContext):
    await state.update_data(number=message.text)
    await state.set_state(Reg_delivery.address)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å')


@router.message(Reg_delivery.address)
async def reg_delivery_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await state.update_data(order_number=o_number)
    await state.update_data(user=message.from_user.id)
    for item_get in await get_item_in_basket(message.from_user.id):
        await state.update_data(item=item_get)
        await state.update_data(status='–û–±—Ä–∞–±–æ—Ç–∫–∞')
        data = await state.get_data()
        await set_order(data)
    await message.answer(f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n–ò–º—è: {data['name']}\n–ù–æ–º–µ—Ä: {data['number']}\n–ê–¥—Ä–µ—Å: {data['address']}', reply_markup=await kb.pay())
    await state.clear()


@router.callback_query(F.data == 'pay')
async def ready_pay(callback: CallbackQuery):
    await callback.answer('')
    await delete_basket(callback.from_user.id)
    await callback.message.edit_text(f'–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n\n–í–∞—à –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ - {o_number}\n\n–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.',
                                     reply_markup=await kb.ready_order())

        
@router.callback_query(F.data.startswith('delete_'))
async def delete_from_basket(callback: CallbackQuery):
    await delete_item_in_basket(callback.from_user.id, int(callback.data.split('_')[1]))
    await callback.message.delete()
    await callback.answer('–í—ã —É–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã')
